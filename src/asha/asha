#! /usr/bin/env python3

import jinja2
import markdown2
import rangeen
import htmlmin
import os, sys, shutil
import json


class Asha:

    @staticmethod
    def _check_setup(dir_name, files):
        for item in (".asha", "config.json", "posts", "pages", "themes"):
            if item in files: files.remove(item)
        return dir_name, files

    @staticmethod
    def _setup():
        cwd = os.path.join(os.getcwd(), "site")
        dir_path = os.path.dirname(__file__)
        shutil.copytree(dir_path, cwd, ignore=Asha._check_setup) 

    def __init__(self):
        with open("./config.json") as fp:
            global_config = json.loads(fp.read())
        self.theme = global_config.get("theme")

    def _build(self):
        for path in ("posts", ):
            for root, dirs, files in os.walk(path):
                for name in files:
                    self._build_from_path(os.path.join(root, name))

    def _build_from_path(self, file_path):
        html = markdown2.markdown_path(file_path, extras=["metadata"])
        jinja_vars = html.metadata
        jinja_vars["html_content"] = html
        theme_config_path = os.path.splitext(os.path.join("themes", self.theme, file_path))[0] +".json"
        if not os.path.exists(theme_config_path): pass #do something ?
        with open(theme_config_path) as fp:
            jinja_vars.update(json.loads(fp.read()))
        return self._jinja_render(file_path, jinja_vars)

    def _jinja_render(self, file_path, jinja_vars):
        if file_path.split("/")[0] == "posts":
            jinja_file_path = os.path.join("themes", self.theme, "post.jinja")
            html = self._jinja_render_from_path(jinja_file_path, jinja_vars)
            self._create_html_file(file_path, html)
    
    def _jinja_render_from_path(self, jinja_file_path, jinja_vars):
        template_dir, template_file = os.path.split(jinja_file_path)
        template_loader = jinja2.FileSystemLoader(searchpath=template_dir)
        template_env = jinja2.Environment(loader=template_loader)

        template = template_env.get_template(template_file)
        
        html = template.render(**jinja_vars)
        return htmlmin.minify(html, remove_empty_space=True)

    def _create_html_file(self, file_path, html):
        if not os.path.exists("_static_site"):
            path = "_static_site"
            os.mkdir(path)
            for p in file_path.split("/")[:-1]:
                path = os.path.join(path, p)
                os.mkdir(path)
        if file_path.split("/")[0] == "posts":
            file_path = os.path.splitext(os.path.join("_static_site", file_path))[0] +".html"
            with open(file_path, "w+") as fp: fp.write(html)

if __name__ == '__main__':
    usage = rangeen.colorify(f'''
Usage:
-----
asha init - creates a new static site with default settings
asha install URL - fetch plugin or theme from URL and installs it
asha build - builds the static website
asha serve - serves the static site
    ''', fg=rangeen.colors.GREEN)
    if len(sys.argv) < 2 or sys.argv[1] not in ("init", "build", "install", "serve", "clean"):
        error_message = f'''
        Error! - Invalid usage see correct usage below
        {usage}
        '''
        print(rangeen.danger(error_message))
    else:
        command = sys.argv[1].lower()
        if command == "init":
            Asha._setup()
        elif command == "build":
            asha = Asha()
            asha._build()
        else:
            pass #implement later
    #asha = Asha()
    #asha._build()
